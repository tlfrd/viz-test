<div class="panel panel-default">
  <div class="panel-heading"><strong><%= @experiment_task_result.experiment_result.experiment.name %></strong></div>
  <table class="table">
    <thead>
      <tr>
        <th>UUID</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
        <tr>
          <td><%= @experiment_task_result.experiment_result.uuid %></td>
          <td><%= @experiment_task_result.experiment_task.task.name %></td>
          <td><%= @experiment_task_result.experiment_task.task.description %></td>
        </tr>
    </tbody>
  </table>
</div>

<div class="panel panel-default">
  <div class="panel-heading"><strong>Analysis</strong> (Click to pause)</div>
  <table class="table">
    <tbody>
        <tr>
          <td><strong>Selected coordinates</strong></td>
          <td id="coordinates">(0, 0)</td>
        </tr>
        <tr>
          <td><strong>Avg dist from selected coordinates</strong></td>
          <td id="distance">0 px</td>
        </tr>
    </tbody>
  </table>
</div>

<div class="visualisation">
  <%= @visualisation.html.html_safe %>
</div>

<% if @experiment_task_result.experiment_task.task.task_type == "Click" %>
  <style>
    .click-circle {
        fill: white;
        stroke: black;
        stroke-width: 2px;
    }
  </style>

  <script>

    function drawCircle(x, y, size, time) {
      d3.select("g.circles")
          .append("circle")
          .datum({
            "x": x,
            "y": y,
            "time": time
          })
          .attr('class', 'click-circle')
          .attr("cx", x)
          .attr("cy", y)
          .attr("r", size)
          .append("title")
          .text(function(d) {
                return d.time + " ms";
          });
    }

    function drawLine(x1, y1, x2, y2) {
      d3.select("g.lines")
        .append("line")
        .style("stroke", "red")
        .attr("x1", x1)
        .attr("y1", y1)
        .attr("x2", x2)
        .attr("y2", y2);
    }

    function calculateDistance(x1, y1, x2, y2) {
      var distance = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
      return distance;
    }

    function average(array) {
      var sum = array.reduce(function(sum, a) {
        return sum + a
      }, 0)
      return sum / (array.length || 1);
    }

    function drawLinesToAllCircles(x1, y1) {
      var distances = [];

      d3.select("g.circles")
        .selectAll("circle")
        .each(function(d) {
          drawLine(x1, y1, d.x, d.y);
          distances.push(calculateDistance(x1, y1, d.x, d.y));
        });

      return average(distances);
    }

    function removeAllLines(transition_boolean) {
      var lines = d3.select("g.lines")
        .selectAll("line");

      if (transition_boolean) {
        lines.transition()
          .duration(500)
          .style("opacity", 0)
          .remove();
      } else {
        lines.remove();
      }
    }

    function updateLiveAnalysis(coordinates, distance) {
      $("#coordinates").html("(" + Math.round(coordinates[0]) + ", " + Math.round(coordinates[1]) + ")");
      $("#distance").html(Math.round(distance) + " px");
    }

    var loadResults = function() {
      var locked = false;
      var h = svg.attr("height");
      var w = svg.attr("width");

      svg.append("g")
        .attr("class", "circles");

      <% @experiment_task_result.result.each do |result| %>
          drawCircle(<%= result[1]["coordinates"][0] %>, <%= result[1]["coordinates"][1] %>, 5, <%= result[1]["time"] %>);
      <% end %>

      svg.append("g")
        .attr("class", "lines");

      var rectangle = svg.append("rect")
     			.attr("x", 0)
     			.attr("y", 0)
     			.attr("height", h)
     			.attr("width", w)
     			.style("stroke", "black")
     			.style("fill", "none")
     			.style("stroke-width", 1)
          .style("pointer-events", "all")
          .on("mouseover", function() {
            if (!locked) {
              var avgDist = drawLinesToAllCircles(d3.mouse(this)[0], d3.mouse(this)[1]);
              updateLiveAnalysis(d3.mouse(this), avgDist);
            }
          })
          .on("mousemove", function() {
            if (!locked) {
              removeAllLines(false);
              var avgDist = drawLinesToAllCircles(d3.mouse(this)[0], d3.mouse(this)[1]);
              updateLiveAnalysis(d3.mouse(this), avgDist);
            }
          })
          .on("mouseout", function() {
            if (!locked) {
              removeAllLines(true);
            }
          })
          .on("click", function() {
            locked = !locked;
          })
    }

  </script>

  <br/>
  <%= render partial: "click_task_result", object: @result = @experiment_task_result.result %>
<% else %>
  <br/>
  <%= render partial: "question_task_result", object: @result = @experiment_task_result.result %>
<% end %>
