<% if notice %>
  <div class="alert alert-info" role="alert"><%= notice %></div>
<% end %>

<div class="container">
  <div class="row">
    <div class="col-md-12">
      <h3><%= @task.name %></h3>
    <div>
  </div>
</div>

<div class="container">
  <div class="row">
    <div class="col-md-10">
      <div class="panel panel-default">
        <div class="panel-heading">
          <div class="panel-title">
            Attributes
          </div>
        </div>

        <table class="table">
          <tr>
            <td><strong>Visualisation</strong></td>
            <td><%= link_to @visualisation.title, @visualisation %></td>
          </tr>
          <tr>
            <td><strong>Type<strong></td>
            <td><%= @task.task_type %></td>
          </tr>
          <tr>
            <td><strong>Description<strong></td>
            <td><%= @task.description %></td>
          </tr>
          <tr>
            <td><strong>Number of clicks<strong></td>
            <td><%= @task.no_of_clicks %></td>
          </tr>
        </table>
      </div>
    </div>

    <div class="col-md-2">
      <%= link_to 'Preview Task', task_preview_path(@task), method: :get, :class => "btn btn-info btn-white-text btn-spacing" %><br/>
      <%= link_to 'Edit', edit_task_path(@task), :class => "btn btn-warning btn-spacing"  %></br>
      <%= link_to 'Destroy', @task, method: :delete, data: { confirm: 'Are you sure?' }, class: "btn btn-danger btn-spacing" %><br/>
    </div>
  </div>
</div>

<% if @task.task_type == "Click" %>
<div class="container">
  <div class="row">
    <div class="col-md-10">
      <div class="panel panel-default">
        <div class="panel-heading">
          <div class="panel-title">
            Correct Click Areas
          </div>
        </div>

        <% if @task.correct_coordinates.length > 0 %>
          <table class="table">
            <thead>
              <tr>
                <td><strong>Index</strong></td>
                <td><strong>Coordinates</strong></td>
                <td><strong>Actions</strong></td>
              </tr>
            </thead>
            <tbody>
              <% @task.correct_coordinates.each_with_index do |coords, index| %>
                <% if coords %>
                  <tr>
                    <td><strong><%= index %></strong></td>
                    <td>(<%= coords[0][0].to_i %>, <%= coords[0][1].to_i %>), (<%= coords[1][0].to_i %>, <%= coords[1][1].to_i %>)</td>
                    <td><%= button_to "Remove", task_remove_coordinates_path(task_id: @task.id, position: index), :method => :post, :class => "btn btn-danger btn-spacing" %></td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
        <% else %>
          <div class="panel-body">
            None defined
          </div>
        <% end %>
      </div>
    </div>

    <div class="col-md-2">
      <%= form_for(:request, :url => task_add_coordinates_path(@task)) do |f| %>
        <%= f.hidden_field :result, :value => "{}" %>
        <%= f.submit "Add Answer Coordinates", class: "btn btn-success", id: "add" %>
      <% end %>
    </div>
  </div>
</div>
<% end %>

<% if @task.task_type == "Compare" %>
<div class="container">
  <div class="row">
    <div class="col-md-12">
      <button type="button" class="btn btn-warning" id="move">Edit annotations</button>
      <button type="button" class="btn btn-success" id="add">Add annotation</button>
      <button type="button" class="btn btn-danger" id="remove">Remove last annotation</button>      
      <br/><br/>
      <%= form_for(:request, :url => task_add_annotations_path(@task)) do |f| %>
        <%= f.hidden_field :annotations, :value => "{}" %>
        <%= f.submit "Submit annotations", class: "btn btn-success", id: "submit" %>
      <% end %>
      <br/><br/>
    </div>
  </div>
</div>
<% end %>

<div class="container">
  <div class="row">
    <div class="col-md-12">
      <div class="visualisation">
        <%= @visualisation.html.html_safe %>
      </div>
    </div>
  </div>
</div>

<% if @task.task_type == "Click" %>
<script>
  document.getElementById("add").disabled = true;

  var selected_svg;
  var results = [];

  function recordResult(coordinates) {
    console.log(coordinates);
    results.push([[coordinates.x1, coordinates.y1], [coordinates.x2, coordinates.y2]]);
    document.getElementById("request_result").value = JSON.stringify(results);
  }

  var selectionRect = {
  	element			: null,
  	previousElement : null,
  	currentY		: 0,
  	currentX		: 0,
  	originX			: 0,
  	originY			: 0,
  	setElement: function(ele) {
  		this.previousElement = this.element;
  		this.element = ele;
  	},

  	getNewAttributes: function() {
  		var x = this.currentX<this.originX?this.currentX:this.originX;
  		var y = this.currentY<this.originY?this.currentY:this.originY;
  		var width = Math.abs(this.currentX - this.originX);
  		var height = Math.abs(this.currentY - this.originY);
  		return {
  	        x       : x,
  	        y       : y,
  	        width  	: width,
  	        height  : height
  		};
  	},

  	getCurrentAttributes: function() {
  		// use plus sign to convert string into number
  		var x = +this.element.attr("x");
  		var y = +this.element.attr("y");
  		var width = +this.element.attr("width");
  		var height = +this.element.attr("height");
  		return {
  			x1  : x,
  	        y1	: y,
  	        x2  : x + width,
  	        y2  : y + height
  		};
  	},

  	getCurrentAttributesAsText: function() {
  		var attrs = this.getCurrentAttributes();
  		return "x1: " + attrs.x1 + " x2: " + attrs.x2 + " y1: " + attrs.y1 + " y2: " + attrs.y2;
  	},

  	init: function(newX, newY) {
  		var rectElement = selected_svg.append("rect")
  		    .attr("rx", 4)
          .attr("ry", 4)
          .attr("x", 0)
          .attr("y", 0)
          .attr("width", 0)
          .attr("height", 0)
  		    .classed("selection", true);
  	    this.setElement(rectElement);
  		this.originX = newX;
  		this.originY = newY;
  		this.update(newX, newY);
  	},

  	update: function(newX, newY) {
  		this.currentX = newX;
  		this.currentY = newY;
      var attributes = this.getNewAttributes();
  		this.element
        .attr("x", attributes.x)
        .attr("y", attributes.y)
        .attr("width", attributes.width)
        .attr("height", attributes.height);
  	},

  	focus: function() {
          this.element
              .style("stroke", "#DE695B")
              .style("stroke-width", "2.5");
      },
      remove: function() {
      	this.element.remove();
      	this.element = null;
      },
      removePrevious: function() {
      	if(this.previousElement) {
      		this.previousElement.remove();
      	}
      }
  };

  function dragStart() {
      var p = d3.mouse(this);
      selectionRect.init(p[0], p[1]);
  	selectionRect.removePrevious();
  }

  function dragMove() {
  	var p = d3.mouse(this);
      selectionRect.update(p[0], p[1]);
  }

  function dragEnd() {
  	var finalAttributes = selectionRect.getCurrentAttributes();
  	recordResult(finalAttributes);
    document.getElementById("add").disabled = false;
  	if(finalAttributes.x2 - finalAttributes.x1 > 1 && finalAttributes.y2 - finalAttributes.y1 > 1){
  		// range selected
  		d3.event.sourceEvent.preventDefault();
  		selectionRect.focus();
  	} else {
          // single point selected
          selectionRect.remove();
          // trigger click event manually
      }
  }

  var dragBehavior = d3.drag()
      .on("drag", dragMove)
      .on("start", dragStart)
      .on("end", dragEnd);

  function init() {
    selected_svg = d3.select("svg");

    var h = selected_svg.attr("height");
    var w = selected_svg.attr("width");

    var cover = selected_svg.append("g");

    cover.append("rect")
       			.attr("x", 0)
       			.attr("y", 0)
       			.attr("height", h)
       			.attr("width", w)
       			.style("stroke", "black")
            .style("fill", "none")
       			.style("stroke-width", 1);

    selected_svg.call(dragBehavior);

    <% @task.correct_coordinates.each_with_index do |coords, index| %>
      <% if coords %>
        drawRectangle(selected_svg, [[<%= coords[0][0].to_i %>, <%= coords[0][1].to_i %>], [<%= coords[1][0].to_i %>, <%= coords[1][1].to_i %>]]);
      <% end %>
    <% end %>
  }

  loadVisualisation(init);
</script>
<% end %>

<% if @task.task_type == "Compare" %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-annotation/1.18.0/d3-annotation.min.js"></script>
<script>

  var makeAnnotations;
  var annotations = [];
  var inEditMode = false;  

  var json = "<%= @task.annotations %>".replace(/&quot;/gi, '"');
  var objs = JSON.parse(json);

  if (objs.length > 0) {
    objs.forEach(function(d, i) {
      var obj = {
          type: d3.annotationCalloutCircle,
          note: { label: "Point " + (i + 1) },
          x: d.x, y: d.y,
          dx: d.dx, dy: d.dy,
          subject: d.subject
        };
      annotations.push(obj);
    });
  }

  d3.select("#add")
    .on("click", function() {
        saveAnnotations();      
        annotations.push({
            type: d3.annotationCalloutCircle,
            note: { label: "Point " + (annotations.length + 1) },
            x: 50, y: 50,
            dy: 50, dx: 50,
            subject: { radius: 25, radiusPadding: 0 }
          });
        
        makeAnnotations.annotations(annotations).update();

        makeAnnotations.editMode(true).update();
        inEditMode = true;        
        d3.select("#move").html("Save annotations");
    });

  d3.select("#move")
    .on("click", function() {
      if (inEditMode) {
        makeAnnotations.editMode(false).update();
        inEditMode = false;
        d3.select(this).html("Edit annotations");
        saveAnnotations();
      } else {
        makeAnnotations.editMode(true).update();
        inEditMode = true;        
        d3.select(this).html("Save annotations");
      }
    });

  d3.select("#remove")
    .on("click", function() {
      removeLastAnnotation();
    });

  function removeLastAnnotation() {
    if (annotations.length > 1) {
      annotations.pop();

      makeAnnotations.annotations(annotations).update();

      makeAnnotations.editMode(true).update();
      inEditMode = true;        
      d3.select("#move").html("Save annotations");
    } else {
      annotations.pop();
      d3.select("g.annotations").remove()
      makeAnnotations.annotations(annotations).update();      
    }
  }

  function saveAnnotations() {
    makeAnnotations.collection().annotations.forEach(function(d, i) {
      var obj = {
        x: d.x,
        y: d.y,
        dx: d.dx,
        dy: d.dy,
        subject: d.subject
      };
      annotations[i].x = d.x;
      annotations[i].y = d.y;
      annotations[i].dx = d.dx;
      annotations[i].dy = d.dy;
      annotations[i].subject = d.subject;
    });

    document.getElementById("request_annotations").value = JSON.stringify(annotations);
  }

  function init() {
    makeAnnotations = d3.annotation()
        .editMode(false)
        .annotations(annotations);

    var selected_svg = d3.select("svg");

    var h = selected_svg.attr("height");
    var w = selected_svg.attr("width");

    var cover = selected_svg.append("g");

    cover.append("rect")
       			.attr("x", 0)
       			.attr("y", 0)
       			.attr("height", h)
       			.attr("width", w)
       			.style("stroke", "black")
            .style("fill", "none")
       			.style("stroke-width", 1);

    cover.append("g")
      	.attr("class", "annotation-group")
      	.call(makeAnnotations);
  }

  loadVisualisation(init);
</script>
<% end %>

<% if @task.task_type == "Question" %>
<script>
  function init() {
    var selected_svg = d3.select("svg");

    var h = selected_svg.attr("height");
    var w = selected_svg.attr("width");

    var cover = selected_svg.append("g");

    cover.append("rect")
       			.attr("x", 0)
       			.attr("y", 0)
       			.attr("height", h)
       			.attr("width", w)
       			.style("stroke", "black")
            .style("fill", "none")
       			.style("stroke-width", 1);
  }

  loadVisualisation(init);
</script>
<% end %>