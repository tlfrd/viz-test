<p>
  <strong>Title:</strong>
  <%= @visualisation.title %>
</p>

<div id="map"></div>
<div id="blank-map"></div>

<% if params[:stage] == 'filled' %>
    <%= link_to 'Recreate', visualisation_recreate_path(@visualisation, :stage => 'empty'), method: :get %>
<% end %>

<% if params[:stage] == 'empty' %>
  <%= form_for @visualisation, :url => {:action=> "submit_json"}, :html => {:class => "nifty_form", :method => :post} do |f| %>
    <%= f.hidden_field :colour_values, value: {} %>
    <%= f.submit "Submit"%>
  <% end %>
<% end %>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script src="https://d3js.org/topojson.v2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>

<script>
  var usa = "<%= @visualisation.json_urL %>";
  var stats = "<%= @visualisation.csv_urL %>";

  var width = 900, height = 600;

  // TODO read query using JS
  if (<%= params[:stage] == 'filled' %>) {
    var svg = d3.select("#map").append("svg")
      .attr("width", width)
      .attr("height", height);
  }

  if (<%= params[:stage] == 'empty' %>) {
    var svg2 = d3.select("#blank-map").append("svg")
      .attr("width", width)
      .attr("height", height);
  }

  var colour = d3.scale.quantize()
    .range(["rgb(237,248,233)","rgb(186,228,179)","rgb(116,196,118)","rgb(49,163,84)","rgb(0,109,44)"]);

  var projection = d3.geo.albersUsa()
    .scale(750)
    .translate([width / 2, height / 2]);

  var path = d3.geo.path().projection(projection);

  function changeColour(area) {
    var valInRange = parseInt(area.attr("currentvalue"));
    var newColour;

    if (valInRange === colour.range().length) {
      area.attr("currentvalue", 0);
      newColour = colour.range()[0];
    } else if (valInRange === colour.range().length - 1) {
      area.attr("currentvalue", valInRange + 1);
      newColour = "#ccc";
    } else {
      area.attr("currentvalue", valInRange + 1);
      newColour = colour.range()[valInRange + 1];
    }

    area.style("fill", newColour);
    updateResults();
  }

  function updateResults() {
    var results = {};
    d3.selectAll('.border-2').each(function(d, i) {
      results[this.getAttribute("name")] = this.getAttribute("currentvalue");
    });
    document.getElementById('visualisation_colour_values').value = JSON.stringify(results);
  }

  // remove nested ajax
  d3.csv(stats, function(err, stats) {
    colour.domain([
      d3.min(stats, function(d) { return d.value; }),
      d3.max(stats, function(d) { return d.value; })
    ]);

    d3.json(usa, function(err, data) {
      $.each(data.features, function(i, feature) {
        var name = feature.properties.name;
        var record = _.findWhere(stats, {state: name})
        if (record) {
          // console.log(record.value);
        }
        if (<%= params[:stage] == 'filled' %>) {
          svg.append("path")
            .datum(feature.geometry)
            .attr("class", "border")
            .attr("name", name)
            .attr("d", path)
            .style("fill", function (d) {
              if (record) {
                return colour(record.value)
              } else {
                return "#ccc";
              }
            });
        }
        if (<%= params[:stage] == 'empty' %>) {
          svg2.append("path")
            .datum(feature.geometry)
            .attr("class", "border-2")
            .attr("d", path)
            .style("fill", "#ccc")
            .style("stroke", "aaa")
            .attr("currentvalue", 0)
            .attr("name", name)
            .on("click", function () {
              // console.log(d3.select(this).attr("currentvalue"));
              changeColour(d3.select(this));
            });
        }
      });
    });
  });
</script>
